import { useParams } from "react-router-dom";
import { useEffect, useState, useCallback } from "react"; // Import useCallback
import {
  collection,
  getDocs,
  query,
  where,
  doc,
  getDoc,
  documentId,
} from "firebase/firestore";
import { Post } from "../../types/types"; // Adjust path as necessary
import { useAuth } from "../../contexts/userAuthContext";
import { db } from "../../firebase/firebase.config";
import PostCard from "../../components/post-card/PostCard.component";
import CreatePost from "../../components/create-post/CreatePost.component";

const UserProfilePage: React.FC = () => {
  const { userId } = useParams<{ userId: string }>(); // Ensure useParams has the correct type
  const { currentUser } = useAuth();
  const [userPosts, setUserPosts] = useState<Post[]>([]);
  const [savedPosts, setSavedPosts] = useState<Post[]>([]);

  // Define fetchUserPosts as a callback
  const fetchUserPosts = useCallback(async () => {
    if (!userId) return; // Ensure userId is defined

    const postsCollectionRef = collection(db, "posts");
    const q = query(postsCollectionRef, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);
    const posts: Post[] = querySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...(doc.data() as Omit<Post, "id">), // Omit 'id' since it is generated by Firestore
    }));
    setUserPosts(posts);
  }, [userId]); // Add userId to the dependency array

  const fetchSavedPosts = async () => {
    if (!userId || currentUser?.uid !== userId) return; // Ensure userId is defined

    const userRef = doc(db, "users", userId); // userId should be defined here
    const userSnap = await getDoc(userRef);
    const savedPostIds = userSnap.data()?.savedPosts || [];

    if (savedPostIds.length > 0) {
      const postsCollectionRef = collection(db, "posts");
      const q = query(
        postsCollectionRef,
        where(documentId(), "in", savedPostIds)
      );
      const querySnapshot = await getDocs(q);
      const posts: Post[] = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...(doc.data() as Omit<Post, "id">), // Omit 'id' since it is generated by Firestore
      }));
      setSavedPosts(posts);
    }
  };

  useEffect(() => {
    fetchUserPosts();
    fetchSavedPosts();
  }, [fetchUserPosts, currentUser]); // Add fetchUserPosts to the dependency array

  // Callback to refresh user posts when a new post is created
  const handlePostCreated = async () => {
    await fetchUserPosts(); // Call the fetchUserPosts function
  };
  console.log(userPosts);
  return (
    <div>
      <h3 style={{ textAlign: "center" }}>Create Post</h3>
      <CreatePost onPostCreated={handlePostCreated} />
      <h3
        style={{
          borderTop: "2px solid black",
          textAlign: "center",
          paddingTop: "5px",
        }}
      >
        My Posts
      </h3>
      {userPosts &&
        userPosts.map((post) => <PostCard key={post.id} post={post} />)}
      <h3
        style={{
          borderTop: "2px solid black",
          textAlign: "center",
          paddingTop: "5px",
        }}
      >
        My Saved Posts
      </h3>

      {savedPosts.map((post) => (
        <PostCard key={post.id} post={post} />
      ))}
    </div>
  );
};

export default UserProfilePage;
